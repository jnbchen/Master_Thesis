  function h_navi=zr_navi(zr, bez, params)
% function h_navi=zr_navi(zr, bez, params)
%
% 
%  zr: Matrix der Größe Abtastpunkte x Anzahl Zeitreihen
%  bez: Bezeichner der Zeitreihen in einer Stringmatrix (jede Zeile eine Zeitreihe)
%  params: Struct mit Parametern. Wird zurzeit nicht verwendet!
% 
%  Ist die Funktion schon gestartet?
%
% The function zr_navi is part of the MATLAB toolbox Gait-CAD. 
% Copyright (C) 2010  [Ralf Mikut, Tobias Loose, Ole Burmeister, Sebastian Braun, Andreas Bartschat, Johannes Stegmaier, Markus Reischl]


% Last file change: 26-Nov-2014 11:56:01
% 
% This program is free software; you can redistribute it and/or modify,
% it under the terms of the GNU General Public License as published by 
% the Free Software Foundation; either version 2 of the License, or any later version.
% 
% This program is distributed in the hope that it will be useful, but
% WITHOUT ANY WARRANTY; without even the implied warranty of 
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License along with this program;
% if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA.
% 
% You will find further information about Gait-CAD in the manual or in the following conference paper:
% 
% MIKUT, R.; BURMEISTER, O.; BRAUN, S.; REISCHL, M.: The Open Source Matlab Toolbox Gait-CAD and its Application to Bioelectric Signal Processing.  
% In:  Proc., DGBMT-Workshop Biosignal processing, Potsdam, pp. 109-111; 2008 
% Online available: https://sourceforge.net/projects/gait-cad/files/mikut08biosig_gaitcad.pdf/download
% 
% Please refer to this paper, if you use Gait-CAD for your scientific work.

indx = findobj('type', 'figure', 'tag', 'zr_navi_main_figure_12jh2');
if (~isempty(indx))
   delete(indx);
end;
% Figure erzeugen
zrn_s.figure 			= figure('tag', 'zr_navi_main_figure_12jh2');
zrn_s.breite 			= 900; % Breite und
zrn_s.hoehe  			= 650; % Höhe des Fensters
zrn_s.zr 				= zr;  % Sichere die Zeitreihen, die angezeigt werden können
zrn_s.zr_bez			= deblank(bez(1:size(zrn_s.zr,2),:)); % Bezeichner der Zeitreihen
zrn_s.akt_pos  		= 1; % Startpunkt der Anzeige [Abtastpunkt]
zrn_s.akt_step 		= 1; % Schrittweite bei der Anzeige der Abtastpunkte
zrn_s.akt_ap   		= size(zrn_s.zr, 1)*0.1; % Wie viele Abastpunkte sollen gleichzeitig zu sehen sein?
zrn_s.mouse_pos(1,1) = 1; % Eine Sicherheitsmaßnahme...
zrn_s.zr_auswahl		= 1; % Auswahl der anzuzeigenden Zeitreihe.

screensize = get(0, 'ScreenSize');
% Zentrale Position berechnen.
x_pos = (screensize(3)-zrn_s.breite)/2;
y_pos = (screensize(4)-zrn_s.hoehe)/2;
set(zrn_s.figure, 'UserData', zrn_s);
set(zrn_s.figure, 'Position', [x_pos y_pos zrn_s.breite zrn_s.hoehe]);

% Eigenschaften festlegen
set(zrn_s.figure, 'Name', sprintf('%d: TS Navigator',get_figure_number(zrn_s.figure)), 'NumberTitle', 'off', ...
   'DoubleBuffer', 'on', 'MenuBar', 'none', ...
   'ResizeFcn', 'zr_navi_callbacks([], ''resize'');', ...
   'DeleteFcn', 'zr_navi_callbacks([], ''close'');');
% Zeichendingens einbauen. Position ist relativ, was Vorteile bei der Änderung der Größe bringt.
zrn_s.axes = axes('Position', [.1 .3 .8 .65], ...
   'ButtonDownFcn', 'zr_navi_callbacks([], ''ax_bdn'');', ...
   'NextPlot', 'replacechildren');

fig_size = get(zrn_s.figure, 'Position');
ax_size = get(zrn_s.axes, 'Position');
% Richte einen Slider ein. Der soll die Navigation in der Zeitreihe erlauben.
zrn_s.elements.slider.hoehe = 10;
% Die Positionsangabe sieht etwas komisch aus. Sie garantiert aber gleiche Höhe und bündige Position
% mit der Zeichenfläche. Auch bei Veränderung der Fenstergröße. Dafür wird dann natürlich noch die
% ResizeFcn des Fensters benötigt....
zrn_s.elements.slider.h = uicontrol('Style', 'Slider', 'Units', 'normalized', ...
   'Position', [.1 ax_size(2)-(3*zrn_s.elements.slider.hoehe/fig_size(4)) .8 zrn_s.elements.slider.hoehe/fig_size(4)], ...
   'Callback', 'zr_navi_callbacks([], ''slider'');', ...
   'Value', 1, 'Min', 1, 'Max', size(zrn_s.zr,1), ...
   'TooltipString','Slider for time');
% Listbox mit markierten Triggerevents
zrn_s.elements.triggers.listbox = uicontrol('Style', 'listbox', ...
   'Position', [150 10 120 80], 'Min', 0, 'Max', 1, ...
   'TooltipString','List of current trigger events');
% Aktuelle Markierung als Triggerereignis hinzufügen
zrn_s.elements.triggers.add_button = uicontrol('Style', 'pushbutton', ...
   'callback', 'zr_navi_callbacks([], ''add_trigger'');', ...
   'Position', [290 70 80 20], 'String', 'Add',...
   'TooltipString','adds a trigger event for the current sample point');
% Markiertes Triggerereignis entfernen
zrn_s.elements.triggers.del_button = uicontrol('Style', 'pushbutton', ...
   'callback', 'zr_navi_callbacks([], ''del_trigger'');', ...
   'Position', [290 40 80 20], 'String', 'Remove',...
   'TooltipString','delete the current trigger event');
% Zum gewählten Triggerereignis springen
zrn_s.elements.triggers.gehe_button = uicontrol('Style', 'pushbutton', ...
   'callback', 'zr_navi_callbacks([], ''auswahl_trigger'');', ...
   'Position', [290 10 80 20], 'String', 'Go to',...
   'TooltipString','jumps to the current trigger event');
% Klasse des Triggers erhöhen
zrn_s.elements.triggers.ink_klasse = uicontrol('Style', 'pushbutton', ...
   'callback', 'zr_navi_callbacks([] ,''ink_klasse'');', ...
   'Position', [410 70 20 20], 'String', '+', ...
   'TooltipString','increases class number for the current trigger event');
% Klasse des Triggers verringern
zrn_s.elements.triggers.dek_klasse = uicontrol('Style', 'pushbutton', ...
   'callback', 'zr_navi_callbacks([] ,''dek_klasse'');', ...
   'Position', [410 40 20 20], 'String', '-', ...
   'TooltipString','decreases class number for the current trigger event');
zrn_s.elements.triggers.ink_pos = uicontrol('Style', 'pushbutton', ...
   'callback', 'zr_navi_callbacks([], ''ink_pos'');', ...
   'Position', [440 40 20 20], 'String', '->', ...
   'TooltipString','increases sample point for the current trigger event');
zrn_s.elements.triggers.dek_pos = uicontrol('Style', 'pushbutton', ...
   'callback', 'zr_navi_callbacks([], ''dek_pos'');', ...
   'Position', [380 40 20 20], 'String', '<-', ...
   'TooltipString','decreases sample point for the current trigger event');
% Trigger importieren
zrn_s.elements.triggers.import = uicontrol('Style', 'pushbutton', ...
   'callback', 'zr_navi_callbacks([], ''im_trigger'');', ...
   'Position', [380 10 80 20], 'String', 'Import', ...
   'TooltipString','imports trigger events from a workspace variable (The length of the variable must be equal to the length of the time series! The trigger events have positive integer values.)');
% Edits oder Buttons für den Zoom-Faktor
zrn_s.elements.zoom.edit = uicontrol('Style', 'edit', 'String', num2str(zrn_s.akt_ap), ...
   'callback', 'zr_navi_callbacks([], ''zoomedit'');', ...
   'Position', [20 50 50 20], ...
   'TooltipString','Window width: i sample points');
zrn_s.elements.reduktion.edit = uicontrol('Style', 'edit', 'String', num2str(zrn_s.akt_step), ...
   'callback', 'zr_navi_callbacks([], ''reduktion'');', ...
   'Position', [80 50 50 20], ...
   'TooltipString','shows each i-th sample point');
% Auswahlliste für zu verwendende Zeitreihe?
zrn_s.elements.zeitreihen.listbox = uicontrol('Style', 'listbox', ...
   'String', zrn_s.zr_bez, 'callback', 'zr_navi_callbacks([], ''zr_auswahl'');', ...
   'Position', [480 10 120 80], 'Min', 0, 'Max', 2,...
   'TooltipString','List of shown time series (highlighted)');

% Checkbox für Grid ein/aus
zrn_s.elements.grid.h = uicontrol('Style', 'Checkbox', 'String', 'Grid on/off', 'value', 0, ...
   'callback', 'zr_navi_callbacks([], ''grid'');', ...
   'Position', [20 20 110 20], ...
   'TooltipString','switch grid on or off');
% Button zum Sichern und Übernehmen der Triggerzeitreihe
zrn_s.triggers.save = uicontrol('Style', 'pushbutton', ...
   'callback', 'zr_navi_callbacks([], ''ex_trigger'');', ...
   'Position', [620 10 140 20], 'String', 'Save trigger time series', ...
   'TooltipString','saves trigger events as new time series in the project');
set(zrn_s.figure, 'UserData', zrn_s);
h_navi=zr_navi_callbacks([], 'zoomedit');